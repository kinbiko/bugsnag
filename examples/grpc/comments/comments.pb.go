// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comments.proto

package comments

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetCommentReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCommentReq) Reset()         { *m = GetCommentReq{} }
func (m *GetCommentReq) String() string { return proto.CompactTextString(m) }
func (*GetCommentReq) ProtoMessage()    {}
func (*GetCommentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c79ba7e4af40529a, []int{0}
}

func (m *GetCommentReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCommentReq.Unmarshal(m, b)
}
func (m *GetCommentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCommentReq.Marshal(b, m, deterministic)
}
func (m *GetCommentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommentReq.Merge(m, src)
}
func (m *GetCommentReq) XXX_Size() int {
	return xxx_messageInfo_GetCommentReq.Size(m)
}
func (m *GetCommentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommentReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommentReq proto.InternalMessageInfo

func (m *GetCommentReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetCommentRes struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCommentRes) Reset()         { *m = GetCommentRes{} }
func (m *GetCommentRes) String() string { return proto.CompactTextString(m) }
func (*GetCommentRes) ProtoMessage()    {}
func (*GetCommentRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_c79ba7e4af40529a, []int{1}
}

func (m *GetCommentRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCommentRes.Unmarshal(m, b)
}
func (m *GetCommentRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCommentRes.Marshal(b, m, deterministic)
}
func (m *GetCommentRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommentRes.Merge(m, src)
}
func (m *GetCommentRes) XXX_Size() int {
	return xxx_messageInfo_GetCommentRes.Size(m)
}
func (m *GetCommentRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommentRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommentRes proto.InternalMessageInfo

func (m *GetCommentRes) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetCommentRes) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*GetCommentReq)(nil), "comments.GetCommentReq")
	proto.RegisterType((*GetCommentRes)(nil), "comments.GetCommentRes")
}

func init() { proto.RegisterFile("comments.proto", fileDescriptor_c79ba7e4af40529a) }

var fileDescriptor_c79ba7e4af40529a = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xce, 0xcf, 0xcd,
	0x4d, 0xcd, 0x2b, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xe4,
	0xb9, 0x78, 0xdd, 0x53, 0x4b, 0x9c, 0x21, 0xdc, 0xa0, 0xd4, 0x42, 0x21, 0x3e, 0x2e, 0xa6, 0xcc,
	0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0xa6, 0xcc, 0x14, 0x25, 0x43, 0x54, 0x05, 0xc5,
	0xe8, 0x0a, 0x84, 0x04, 0xb8, 0x98, 0x73, 0x8b, 0xd3, 0x25, 0x98, 0xc0, 0x02, 0x20, 0xa6, 0x51,
	0x10, 0x17, 0x1f, 0x54, 0x7d, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0xaa, 0x90, 0x03, 0x17, 0x17,
	0xc2, 0x10, 0x21, 0x71, 0x3d, 0xb8, 0x73, 0x50, 0xec, 0x96, 0xc2, 0x21, 0x51, 0xac, 0xc4, 0x90,
	0xc4, 0x06, 0x76, 0xb8, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x56, 0xe7, 0xdb, 0xb5, 0xca, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentServiceClient interface {
	GetComment(ctx context.Context, in *GetCommentReq, opts ...grpc.CallOption) (*GetCommentRes, error)
}

type commentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentServiceClient(cc *grpc.ClientConn) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) GetComment(ctx context.Context, in *GetCommentReq, opts ...grpc.CallOption) (*GetCommentRes, error) {
	out := new(GetCommentRes)
	err := c.cc.Invoke(ctx, "/comments.CommentService/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
type CommentServiceServer interface {
	GetComment(context.Context, *GetCommentReq) (*GetCommentRes, error)
}

func RegisterCommentServiceServer(s *grpc.Server, srv CommentServiceServer) {
	s.RegisterService(&_CommentService_serviceDesc, srv)
}

func _CommentService_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comments.CommentService/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetComment(ctx, req.(*GetCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comments.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComment",
			Handler:    _CommentService_GetComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comments.proto",
}
